FROM ubuntu:20.04
# 22.04 is getting errors with 

# set environment variables for tzdata
ARG TZ=America/New_York
ENV TZ=${TZ}

# include manual pages and documentation
ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update &&\
  yes | unminimize

# copy new sources.list
COPY --chown=root:root sources.list /etc/apt/sources.list

# include multiarch support
RUN apt-get -y update
RUN apt-get -y upgrade
RUN apt-get -y install binfmt-support && dpkg --add-architecture amd64

# to install g++ on 22.04
#RUN apt-get -y install manpages
#RUN apt-get -y install manpages-dev


# install GCC-related packages
RUN apt-get -y install binutils-doc
RUN apt-get -y install cpp-doc
RUN apt-get -y install gcc-doc
RUN apt-get -y install g++
RUN apt-get -y install gdb
RUN apt-get -y install gdb-doc
RUN apt-get -y install glibc-doc
RUN apt-get -y install libblas-dev
RUN apt-get -y install liblapack-dev
RUN apt-get -y install liblapack-doc
RUN apt-get -y install libstdc++-10-doc
RUN apt-get -y install make
RUN apt-get -y install make-doc

# install clang-related packages
RUN apt-get -y install clang
RUN apt-get -y install clang-10-doc
RUN apt-get -y install lldb
RUN apt-get -y install clang-format

# install programs used for system exploration
RUN apt-get -y install\
 blktrace\
 linux-tools-generic\
 strace\
 tcpdump

# install interactive programs (emacs, vim, nano, man, sudo, etc.)
RUN apt-get -y install\
 bc\
 curl\
 dc\
 git\
 git-doc\
 man\
 micro\
 nano\
 psmisc\
 sudo\
 wget

# set up libraries
RUN apt-get -y install\
 libreadline-dev\
 locales\
 wamerican\
 libssl-dev

# install programs used for networking
RUN apt-get -y install\
 dnsutils\
 inetutils-ping\
 iproute2\
 net-tools\
 netcat\
 telnet\
 time\
 traceroute

# install GCC-related packages for amd64
RUN apt-get -y install\
 g++-9-x86-64-linux-gnu\
 gdb-multiarch\
 libc6:amd64\
 libstdc++6:amd64\
 libasan5:amd64\
 libtsan0:amd64\
 libubsan1:amd64\
 libreadline-dev:amd64\
 libblas-dev:amd64\
 liblapack-dev:amd64

# qemu user not needed fall23
# RUN apt-get -y install qemu-user

# link x86-64 versions of common tools into /usr/x86_64-linux-gnu/bin
RUN for i in addr2line c++filt cpp-9 g++-9 gcc-9 gcov-9 gcov-dump-9 gcov-tool-9 size strings; do \
        ln -s /usr/bin/x86_64-linux-gnu-$i /usr/x86_64-linux-gnu/bin/$i; done && \
  ln -s /usr/bin/x86_64-linux-gnu-cpp-9 /usr/x86_64-linux-gnu/bin/cpp && \
  ln -s /usr/bin/x86_64-linux-gnu-g++-9 /usr/x86_64-linux-gnu/bin/c++ && \
  ln -s /usr/bin/x86_64-linux-gnu-g++-9 /usr/x86_64-linux-gnu/bin/g++ && \
  ln -s /usr/bin/x86_64-linux-gnu-gcc-9 /usr/x86_64-linux-gnu/bin/gcc && \
  ln -s /usr/bin/x86_64-linux-gnu-gcc-9 /usr/x86_64-linux-gnu/bin/cc && \
  ln -s /usr/bin/gdb-multiarch /usr/x86_64-linux-gnu/bin/gdb

# set up default locale
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8

# remove unneeded .deb files
RUN rm -r /var/lib/apt/lists/*

# set up passwordless sudo for user csc412-user
RUN useradd -m -s /bin/bash csc412-user && \
  echo "csc412-user ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/csc412-init

# create binary reporting version of dockerfile
RUN (echo '#\!/bin/sh'; echo 'if test "x$1" = x-n; then echo 1; else echo 1.arm64; fi') > /usr/bin/csc412-docker-version; chmod ugo+rx,u+w,go-w /usr/bin/csc412-docker-version

# git build arguments
ARG USER=csc412\ User
ARG EMAIL=nobody@example.com

# configure your environment
USER csc412-user
RUN rm -f ~/.bash_logout

WORKDIR /home/csc412-user
CMD ["/bin/bash", "-l"]
